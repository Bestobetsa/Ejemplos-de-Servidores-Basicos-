import java.net.Socket;
import java.net.ServerSocket;
import java.io.DataOutputStream;
import java.io.DataInputStream;
import java.lang.Thread;
import java.nio.ByteBuffer;
class NODO
{
  static Object lock = new Object();

  static int[][] A1 = new int[N/2][N];
  static int[][] A2 = new int[N/2][N];
  static int[][] B1 = new int[N][N/2];
  static int[][] B2 = new int[N][N/2];

  static int[][] C1 = new int[N/2][N/2];
  static int[][] C2 = new int[N/2][N/2];
  static int[][] C3 = new int[N/2][N/2];
  static int[][] C4 = new int[N/2][N/2]; 
  static class Worker extends Thread
  {
    Socket conexion;
    int idSock;
    Worker(Socket conexion)
    {
      this.conexion = conexion;
    }
    public void run()
    {
      // Algoritmo 1
      try {
        DataOutputStream salida = new DataOutputStream(conexion.getOutputStream());
        DataInputStream entrada = new DataInputStream(conexion.getInputStream());
        double x = entrada.readDouble();
        synchronized(lock){

        entrada.close();
        salida.close();
        conexion.close();
      }catch
        (Exception e){
          System.err.println(e.getMessage());
        }
  }
  }
  public static void main(String[] args) throws Exception
  {
    if (args.length != 1)
    {
      System.err.println("Uso:");
      System.err.println("java Matriz <nodo>");
      System.exit(0);
    }
    //Conexion y multi y envio
    //para nodo N(1-3 nodo cero es el servidor)
  Socket conexion=null;
      while(true){
        try{
            conexion=new Socket("localhost",50000);
          break;
        }catch (Exception e){
          Thread.sleep(100);
        }
      }
    entrada.write(idSock);
    switch (idSock){
      case 1:
      //nodo 1
        for(int i=0; i<N/2;i++){
          for(int j=0; j<N;j++){
            entrada.write(A1[i][j]);
            entrada.write(B1[i][j]);
          }
        }
        for(int i=0; i<N/2; i++){
          for(int j=0; j<N; j++){
            C1[i][j]=(A1[i][j])*(B1[i][j]);
          }
        }
        for(int i=0;i<N/2;i++){
          for(int j=0;j<N;j++){
            salida.write(C1[i][j]);
          }
        }
      salida.close();
      entrada.close();
      conexion.close();

      break;
      case 2:
      //nodo 2
        for(int i=0; i<N/2;i++){
          for(int j=0; j<N;j++){
            entrada.write(A1[i][j]);
            entrada.write(B2[i][j]);
          }
        }
        for(int i=0; i<N/2; i++){
          for(int j=0; j<N; j++){
            C2[i][j]=(A1[i][j])*(B2[i][j]);
          }
        }
        for(int i=0;i<N/2;i++){
          for(int j=0;j<N;j++){
            salida.write(C2[i][j]);
          }
        }
      salida.close();
      entrada.close();
      conexion.close();

      break;
      case 3:
      //nodo 3
        for(int i=0; i<N/2;i++){
          for(int j=0; j<N;j++){
            entrada.write(A2[i][j]);
            entrada.write(B1[i][j]);
          }
        }
        for(int i=0; i<N/2; i++){
          for(int j=0; j<N; j++){
            C3[i][j]=(A2[i][j])*(B2[i][j]);
          }
        }
        for(int i=0;i<N/2;i++){
          for(int j=0;j<N;j++){
            salida.write(C3[i][j]);
          }
        }
      break;
      salida.close();
      entrada.close();
      conexion.close();

      case 4:
      //nodo 4
        for(int i=0; i<N/2;i++){
          for(int j=0; j<N;j++){
            entrada.write(A2[i][j]);
            entrada.write(B2[i][j]);
          }
        }
        for(int i=0; i<N/2; i++){
          for(int j=0; j<N; j++){
            C1[i][j]=(A2[i][j])*(B2[i][j]);
          }
        }
        for(int i=0;i<N/2;i++){
          for(int j=0;j<N;j++){
            salida.write(C4[i][j]);
          }
        }
      salida.close();
      entrada.close();
      conexion.close();

      break;
    }
//checksum
public Checksum_Sender(int port) throws IOException 
    { 
        servsock = new ServerSocket(port); 
          
        // Used to block until a client connects to the server 
        socket = servsock.accept(); 
          
        dis = new DataInputStream(socket.getInputStream()); 
        dos = new DataOutputStream(socket.getOutputStream()); 
          
        while (true)  
        { 
            int i, l, sum = 0, nob; 
            Scanner sc = new Scanner(System.in); 
            System.out.println("Enter data length"); 
            l = sc.nextInt(); 
              
            // Array to hold the data being entered 
            int data[] = new int[MAX]; 
              
            // Array to hold the complement of each data 
            int c_data[] = new int[MAX]; 
              
            System.out.println("Enter data to send"); 
              
            for (i = 0; i < l; i++)  
            { 
                data[i] = sc.nextInt(); 
                  
                // Complementing the entered data 
                // Here we find the number of bits required to represent 
                // the data, like say 8 requires 1000, i.e 4 bits 
                nob = (int)(Math.floor(Math.log(data[i]) / Math.log(2))) + 1; 
                  
                // Here we do a XOR of the data with the number 2^n -1, 
                // where n is the nob calculated in previous step 
                c_data[i] = ((1 << nob) - 1) ^ data[i]; 
                  
                // Adding the complemented data and storing in sum 
                sum += c_data[i]; 
            } 
              
            // The sum(i.e checksum) is also sent along with the data 
            data[i] = sum; 
            l += 1; 
              
            System.out.println("Checksum Calculated is : " + sum); 
            System.out.println("Data being sent along with Checkum....."); 
              
            // Sends the data length to receiver 
            dos.writeInt(l); 
              
            // Sends the data one by one to receiver 
            for (int j = 0; j < l; j++) 
                dos.writeInt(data[j]); 
              
            // Displaying appropriate message depending on feedback received 
            if (dis.readUTF().equals("success"))  
            {    
                System.out.println("Thanks for the feedback!! Message received  Successfully!"); 
                break; 
            } 
              
            else if (dis.readUTF().equals("failure"))  
            { 
                System.out.println("Message was not received successfully!"); 
                break; 
            } 
        } 
          
        // Closing all connections 
        dis.close(); 
        dos.close(); 
        socket.close(); 
    } 
  
    // Driver Method 
    public static void main(String args[]) throws IOException 
    { 
        Checksum_Sender cs = new Checksum_Sender(45678); 
    } 
} 
    
}
